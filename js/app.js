// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const { PROXY_URL, MAX_FILE_SIZE, ALLOWED_TYPES } = window.TELEGRAM_CONFIG;

// Mobile menu toggle
function toggleMenu() {
  const nav = document.getElementById('nav-menu');
  nav.classList.toggle('active');
}

// FAQ Toggle
function toggleFaq(el) {
  const answer = el.nextElementSibling;
  const active = answer.classList.contains('show');
  
  document.querySelectorAll('.faq-a').forEach(a => a.classList.remove('show'));
  
  if (!active) {
    answer.classList.add('show');
  }
}

// Contact Form submission
async function submitContactForm(event) {
  event.preventDefault();
  
  const form = event.target;
  const button = form.querySelector('button[type="submit"]');
  const originalText = button.innerHTML;
  
  if (!validateForm(form)) {
    return;
  }
  
  // Rate limiting check
  try {
    window.checkRateLimit();
  } catch (error) {
    showMessage(error.message, 'error');
    return;
  }
  
  button.innerHTML = '<span class="loading"></span> –û—Ç–ø—Ä–∞–≤–∫–∞...';
  button.disabled = true;
  
  try {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    const message = formatContactMessage(data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Vercel –ø—Ä–æ–∫—Å–∏
    await sendToTelegramProxy(message, 'contact');
    
    showMessage('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –Æ—Ä–∏–π —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
    form.reset();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.', 'error');
  }
  
  button.innerHTML = originalText;
  button.disabled = false;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Vercel –ø—Ä–æ–∫—Å–∏
async function sendToTelegramProxy(message, type = 'message') {
  const response = await fetch(`${PROXY_URL}/api/send-message`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Site-Origin': window.location.origin
    },
    body: JSON.stringify({
      message: message,
      type: type
    })
  });
  
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }
  
  return await response.json();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Vercel –ø—Ä–æ–∫—Å–∏  
async function sendDocumentToTelegramProxy(file, metadata, caption) {
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
  const fileData = await new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });

  const response = await fetch(`${PROXY_URL}/api/send-document`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Site-Origin': window.location.origin
    },
    body: JSON.stringify({
      fileData: fileData,
      fileName: file.name,
      fileType: file.type,
      caption: caption,
      metadata: metadata
    })
  });
  
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }
  
  return await response.json();
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function validateForm(form) {
  const name = form.name.value.trim();
  const phone = form.phone.value.trim();
  const comment = form.comment.value.trim();
  
  if (name.length < 2) {
    showMessage('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.', 'error');
    return false;
  }
  
  if (phone.length < 10) {
    showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', 'error');
    return false;
  }
  
  if (comment.length < 10) {
    showMessage('–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.', 'error');
    return false;
  }
  
  return true;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatContactMessage(data) {
  const timestamp = new Date().toLocaleString('ru-RU');
  
  let message = `üìù <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ Intelektis</b>\n\n`;
  message += `üë§ <b>–ò–º—è:</b> ${data.name}\n`;
  message += `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}\n`;
  
  if (data.email) {
    message += `üìß <b>Email:</b> ${data.email}\n`;
  }
  
  message += `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${data.comment}\n\n`;
  message += `üïê <b>–í—Ä–µ–º—è:</b> ${timestamp}\n`;
  message += `üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –°–∞–π—Ç Intelektis`;
  
  return message;
}

// EXIF Analyzer Functions
function handleDragOver(e) {
  e.preventDefault();
  e.currentTarget.classList.add('dragover');
}

function handleDragLeave(e) {
  e.currentTarget.classList.remove('dragover');
}

function handleDrop(e) {
  e.preventDefault();
  e.currentTarget.classList.remove('dragover');
  
  const files = e.dataTransfer.files;
  if (files.length > 0) {
    processFile(files[0]);
  }
}

function handleFileSelect(e) {
  const files = e.target.files;
  if (files.length > 0) {
    processFile(files[0]);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
function processFile(file) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  if (!ALLOWED_TYPES.includes(file.type)) {
    showMessage('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG –∏ TIFF —Ñ–∞–π–ª—ã.', 'error');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  if (file.size > MAX_FILE_SIZE) {
    showMessage('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ú–ë.', 'error');
    return;
  }

  // Rate limiting check
  try {
    window.checkRateLimit();
  } catch (error) {
    showMessage(error.message, 'error');
    return;
  }

  showMessage('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ...', 'warning');

  const reader = new FileReader();
  reader.onload = function(e) {
    const img = new Image();
    img.onload = function() {
      displayImagePreview(this, file.name);
      extractAllMetadata(this, file);
    };
    img.src = e.target.result;
  };
  reader.readAsDataURL(file);
}

function displayImagePreview(img, fileName) {
  const container = document.getElementById('image-container');
  container.innerHTML = `
    <h5 style="margin-bottom: 12px; color: var(--main-color);">
      <i class="fa-solid fa-image"></i> ${fileName}
    </h5>
    <img src="${img.src}" alt="Preview" class="image-preview">
  `;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
function extractAllMetadata(img, file) {
  EXIF.getData(img, function() {
    const allMetaData = EXIF.getAllTags(this);
    const exifContainer = document.getElementById('exif-data');
    const resultsContainer = document.getElementById('exif-results');
    
    const metadata = {
      fileName: file.name,
      fileSize: file.size,
      fileType: file.type,
      lastModified: new Date(file.lastModified).toLocaleString('ru-RU'),
      ...allMetaData
    };

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let telegramMessage = `üîç <b>–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>\n\n`;
    telegramMessage += `üìÅ <b>–§–∞–π–ª:</b> ${file.name}\n`;
    telegramMessage += `üìè <b>–†–∞–∑–º–µ—Ä:</b> ${(file.size / 1024 / 1024).toFixed(2)} –ú–ë\n`;
    telegramMessage += `üóÇ <b>–¢–∏–ø:</b> ${file.type}\n`;
    telegramMessage += `‚è∞ <b>–ò–∑–º–µ–Ω—ë–Ω:</b> ${new Date(file.lastModified).toLocaleString('ru-RU')}\n\n`;

    if (Object.keys(allMetaData).length === 0) {
      telegramMessage += `‚ö†Ô∏è EXIF-–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã`;
      exifContainer.innerHTML = `
        <div class="message warning">
          <i class="fa-solid fa-exclamation-triangle"></i>
          EXIF-–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.
        </div>
      `;
    } else {
      let html = '';
      
      // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const allFields = {
        'Make': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∫–∞–º–µ—Ä—ã',
        'Model': '–ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã',
        'DateTime': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        'DateTimeOriginal': '–î–∞—Ç–∞ —Å—ä—ë–º–∫–∏',
        'Artist': '–ê–≤—Ç–æ—Ä',
        'Copyright': '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞',
        'FNumber': '–î–∏–∞—Ñ—Ä–∞–≥–º–∞',
        'ExposureTime': '–í—ã–¥–µ—Ä–∂–∫–∞',
        'ISOSpeedRatings': 'ISO',
        'FocalLength': '–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ',
        'GPSLatitude': 'GPS –®–∏—Ä–æ—Ç–∞',
        'GPSLongitude': 'GPS –î–æ–ª–≥–æ—Ç–∞'
      };

      telegramMessage += `üìã <b>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</b>\n`;
      
      Object.entries(allFields).forEach(([key, label]) => {
        if (metadata[key] !== undefined && metadata[key] !== null) {
          let value = metadata[key];
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
          if (key === 'ExposureTime' && typeof value === 'number') {
            value = value < 1 ? `1/${Math.round(1/value)} —Å–µ–∫` : `${value} —Å–µ–∫`;
          } else if (key === 'FNumber' && typeof value === 'number') {
            value = `f/${value}`;
          } else if (key === 'FocalLength' && typeof value === 'number') {
            value = `${value}–º–º`;
          }
          
          telegramMessage += `‚Ä¢ <b>${label}:</b> ${value}\n`;
          
          html += `
            <div class="exif-item">
              <div class="exif-label">${label}:</div>
              <div class="exif-value">${value}</div>
            </div>
          `;
        }
      });

      html += `
        <div class="exif-item">
          <div class="exif-label">–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</div>
          <div class="exif-value">${(file.size / 1024 / 1024).toFixed(2)} –ú–ë</div>
        </div>
      `;

      if (html === '') {
        html = `
          <div class="message warning">
            <i class="fa-solid fa-info-circle"></i>
            –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
          </div>
        `;
        telegramMessage += '\n‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ EXIF-–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
      } else {
        html = `
          <div class="message success" style="margin-bottom: 16px;">
            <i class="fa-solid fa-check-circle"></i>
            –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —é—Ä–∏—Å—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
          </div>
        ` + html;
      }

      exifContainer.innerHTML = html;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    Promise.all([
      sendToTelegramProxy(telegramMessage, 'exif'),
      sendDocumentToTelegramProxy(file, metadata, telegramMessage)
    ]).then(() => {
      console.log('EXIF data and file sent successfully');
    }).catch(error => {
      console.error('Error sending EXIF data:', error);
    });
    
    resultsContainer.style.display = 'block';
    resultsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    clearMessages();
  });
}

function showMessage(text, type) {
  clearMessages();
  
  const message = document.createElement('div');
  message.className = `message ${type}`;
  message.innerHTML = text;
  
  let targetElement = document.querySelector('.upload-area');
  if (!targetElement) {
    targetElement = document.querySelector('#contact-form');
  }
  
  if (targetElement) {
    targetElement.parentNode.insertBefore(message, targetElement.nextSibling);
  }
  
  if (type === 'success' || type === 'error') {
    setTimeout(clearMessages, 5000);
  }
}

function clearMessages() {
  const messages = document.querySelectorAll('.message');
  messages.forEach(msg => {
    if (!msg.closest('#exif-results')) {
      msg.remove();
    }
  });
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞, –∞–Ω–∏–º–∞—Ü–∏–∏) –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ...
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
      
      const nav = document.getElementById('nav-menu');
      nav.classList.remove('active');
    }
  });
});

document.addEventListener('click', function(e) {
  const nav = document.getElementById('nav-menu');
  const toggle = document.querySelector('.menu-toggle');
  
  if (!nav.contains(e.target) && !toggle.contains(e.target)) {
    nav.classList.remove('active');
  }
});

const observerOptions = {
  threshold: 0.1,
  rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      entry.target.style.opacity = '1';
      entry.target.style.transform = 'translateY(0)';
    }
  });
}, observerOptions);

document.querySelectorAll('.service-card, .benefit-item, .audience-item, .review-card, .step-item').forEach(el => {
  el.style.opacity = '0';
  el.style.transform = 'translateY(20px)';
  el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
  observer.observe(el);
});
